#!/usr/bin/env php
<?php
use wapmorgan\Threadable\BackgroundWork;
use wapmorgan\Threadable\DownloadWorker;
use wapmorgan\Threadable\ExtractWorker;
use wapmorgan\Threadable\Worker;
require __DIR__.'/../vendor/autoload.php';

// prepare files list
$files = [];
foreach ([
    'https://github.com/symfony/symfony/archive/v4.1.2.zip',
    'http://hosting-obzo-ru.1gb.ru/hosting-obzor.ru.zip',
] as $file_to_download) {
    $files[$file_to_download] = [
        'source' => $file_to_download,
        'size' => DownloadWorker::getRemoteFileSize($file_to_download),
        'target' => tempnam(sys_get_temp_dir(), 'thrd_test'),
    ];
}

function printFilesStatus(array $files)
{
    $downloaded_files = 0;
    $total_percent = 0;
    $total_files = count($files);
    $total_size = 0;
    $downloaded_size = 0;
    foreach ($files as $file) {
        $total_size += $file['size'];

        if (!isset($file['percent'])) continue;
        if ($file['percent'] == 100) $downloaded_files++;
        $total_percent += $file['percent'];

        $downloaded_size += $file['size'] * ($file['percent']/100);
    }


    if ($downloaded_files === $total_files)
        return null;

    echo "\r".'[ Downloaded '.$downloaded_files.' of '.$total_files.' ('.floor($downloaded_size / $total_size * 100).'%)]';
}

$result = BackgroundWork::doInBackgroundParallel(new DownloadWorker(), $files,
    function (Worker $worker, $payloadI, $payloadData) use (&$files) {
        clearstatcache(true, $payloadData['target']);
        $files[$payloadData['source']]['percent'] = floor(filesize($payloadData['target']) * 100 / $payloadData['size']);
        printFilesStatus($files);
    },
    function (Worker $worker, $payloadI, $payloadData, $payloadResult) use (&$files) {
        $files[$payloadData['source']]['percent'] = 100;
        return true;
    }
);

echo PHP_EOL;

if (!$result)
    exit('Something went wrong');

echo 'All files downloaded successfully'.PHP_EOL;

foreach ($files as $key => $file_to_download) {
    $files[$key]['archive'] = $files[$key]['target'];
    $files[$key]['output'] = sys_get_temp_dir();
}

$start_time = time();

function printExtractStatus(array $files, $start_time)
{
    $extracted_files = 0;
    $total_files = count($files);
    foreach ($files as $file) {
        if (isset($file['extracted']) && $file['extracted'])
            $extracted_files++;
    }

    echo "\r".'[ Exracted '.$extracted_files.' of '.$total_files.' ('.(time() - $start_time).' sec)]';
}

$result = BackgroundWork::doInBackgroundParallel(new ExtractWorker(), $files,
    function (Worker $worker, $payloadI, $payloadData) use (&$files, $start_time) {
        printExtractStatus($files, $start_time);
    },
    function (Worker $worker, $payloadI, $payloadData, $payloadResult) use (&$files) {
        $files[$payloadData['source']]['extracted'] = true;
        return true;
    }
);

echo PHP_EOL;

if (!$result)
    exit('Something went wrong');

echo 'All files extracted successfully'.PHP_EOL;
