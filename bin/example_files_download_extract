#!/usr/bin/env php
<?php
use wapmorgan\Threadable\BackgroundWork;
use wapmorgan\Threadable\DownloadWorker;
use wapmorgan\Threadable\ExtractWorker;
use wapmorgan\Threadable\Worker;

require_once __DIR__.'/../vendor/autoload.php';

$file_sources = [
    'http://hosting-obzo-ru.1gb.ru/hosting-obzor.ru.zip',
    'https://github.com/yiisoft/yii/releases/download/1.1.19/yii-1.1.19.5790cb.zip',
    'https://github.com/symfony/symfony/archive/v4.1.0.zip',
    'https://github.com/wapmorgan/Mp3Info/releases/download/0.0.1/fixtures.zip',
];

// prepare payloads
$files = [];
foreach ($file_sources as $file_to_download) {
    $target_file = tempnam(sys_get_temp_dir(), 'thrd_test');
    $files[] = [
        'source' => $file_to_download,
        'size' => DownloadWorker::getRemoteFileSize($file_to_download),
        'target' => $target_file,
        'archive' => $target_file,
        'output' => $target_file.'.extracted/',
    ];
}

$result = BackgroundWork::doInBackground(new DownloadWorker(), $files, function (Worker $worker, $payloadI, $payloadData) {
    clearstatcache(true, $payloadData['target']);
    echo "\r" . '#' . ($payloadI + 1) . '. ' . basename($payloadData['source']) . ' downloading ' . round(filesize($payloadData['target']) * 100 / $payloadData['size'], 2) . '%';
}, function (Worker $worker, $payloadI, $payloadData, $payloadResult) {
    echo "\r" . '#' . ($payloadI + 1) . '. ' . basename($payloadData['source']) . ' successfully downloaded (size '.filesize($payloadData['target']).')' . PHP_EOL;
    return true;
});

if ($result)
    echo 'All files downloaded successfully'.PHP_EOL;

$result = BackgroundWork::doInBackground(new ExtractWorker(), $files, function (Worker $worker, $payloadI, $payloadData) {
    clearstatcache(true, $payloadData['target']);
    echo "\r" . '#' . ($payloadI + 1) . '. ' . basename($payloadData['archive']) . ' extracting ...';
}, function (Worker $worker, $payloadI, $payloadData, $payloadResult) {
    echo "\r" . '#' . ($payloadI + 1) . '. ' . basename($payloadData['archive']) . ' successfully extracted to ' . $payloadData['output'] . PHP_EOL;
    return true;
});

foreach ($files as $file) {
	echo 'Checked '.$file['target'].': ';
	if (file_exists($file['target'])) {
		$actual_size = filesize($file['target']);
		if ($actual_size === $file['size'])
			echo 'is ok' . PHP_EOL;
		else
			echo 'downloaded ' . $actual_size . ' of ' . $file['size'] . ' bytes' . PHP_EOL;
		unlink($file['target']);
	} else {
		echo 'not downloaded'.PHP_EOL;
	}
}
